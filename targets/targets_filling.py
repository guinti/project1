from telebot import types
from bot_info_file import bot, conn
import re
import datetime
from calendar_functions import get_days_in_month


@bot.callback_query_handler(func=lambda call: call.data.startswith('add_purpose'))
def purpose_start(call):
    cur = conn.cursor()
    cur.execute("SELECT COUNT(*) FROM purposes WHERE id=?", (call.from_user.id,))
    if cur.fetchone()[0] == 5:
        bot.edit_message_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤—ã —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–µ–ª–µ–π", call.from_user.id,
                              call.message.message_id)
    else:
        def purpose_fill_start(message, user_id):
            cur = conn.cursor()
            cur.execute("SELECT * FROM purposes WHERE id=? AND subgoal_number=?", (user_id, 1))
            row = cur.fetchone()
            subgoal_number = 1
            while row is not None:
                cur.execute("SELECT * FROM purposes WHERE id=? AND subgoal_number=?", (user_id, row[6] + 1))
                subgoal_number = row[6] + 1
                row = cur.fetchone()
            cur.execute("INSERT INTO purposes(id, purpose, done_percentage, purpose_above, part_of_purpose_above,"
                        " subgoal_number) VALUES(?, ?, ?, ?, ?, ?)", (user_id, message, 0, 0, 0, subgoal_number))
            conn.commit()
            cur.close()
            bot.send_message(user_id,
                             "–û—Ç–ª–∏—á–Ω–æ! –£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É, –¥–æ –∫–æ—Ç–æ—Ä–æ–π –Ω—É–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Ü–µ–ª—å, –≤ —Ñ–æ—Ä–º–∞—Ç–µ –≥–≥–≥–≥-–º–º-–¥–¥."
                             " –ï—Å–ª–∏ –≤–∞—à–∞ —Ü–µ–ª—å –±–µ—Å—Å—Ä–æ—á–Ω–∞, –≤–≤–µ–¥–∏—Ç–µ \"-\"")
            bot.register_next_step_handler(call.message,
                                           lambda mess: purpose_fill_1step(mess.text, user_id, subgoal_number))

        def purpose_fill_1step(mess_text, chat_id, subgoal_num):
            subgoals_keyboard = types.InlineKeyboardMarkup()
            subgoals_button = types.InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥—Ü–µ–ª–∏",
                                                         callback_data='subgoal_add' + str(subgoal_num))
            subgoals_keyboard.add(subgoals_button)
            if mess_text != '-' and not re.match(r'^\d{4}-\d{2}-\d{2}$', mess_text):
                bot.send_message(chat_id,
                                 "–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤—ã –≤–≤–æ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –≤ —Ç–æ–º —Ñ–æ—Ä–º–∞—Ç–µ. –ù—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –≥–≥–≥–≥-–º–º-–¥–¥"
                                 " –∏–ª–∏ –≤–≤–µ—Å—Ç–∏ \"-\"")
                bot.register_next_step_handler(call.message,
                                               lambda mess: purpose_fill_1step(mess.text, chat_id, subgoal_num))
            elif mess_text == '-':
                bot.send_message(chat_id,
                                 "–û—Ç–ª–∏—á–Ω–æ, —É –≤–∞—Å –±–µ—Å—Å—Ä–æ—á–Ω–∞—è —Ü–µ–ª—åüéâ\n –•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–¥—Ü–µ–ª–∏(–¥–æ 10)? –¢–∞–∫ –≤—ã —Å –±–æ–ª—å—à–µ–π"
                                 " –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é –¥–æ—Å—Ç–∏–≥–Ω–µ—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞",
                                 reply_markup=subgoals_keyboard)
            elif re.match(r'^\d{4}-\d{2}-\d{2}$', mess_text):
                year = int(mess_text[:4])
                month = int(mess_text[5:7])
                day = int(mess_text[8:])
                today = datetime.date.today()
                if year < today.year or year > 2100:
                    bot.send_message(chat_id,
                                     "–ò–∑–≤–∏–Ω–∏—Ç–µ, –≥–æ–¥ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ –Ω–∞—Å—Ç–æ—è—â–µ–≥–æ –∏–ª–∏ –±–æ–ª—å—à–µ 2100. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É"
                                     " –∑–∞–Ω–æ–≤–æ")
                    bot.register_next_step_handler(call.message,
                                                   lambda mess: purpose_fill_1step(mess.text, chat_id, subgoal_num))
                elif month > 12 or month == 0:
                    bot.send_message(chat_id,
                                     "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ—Ç –º–µ—Å—è—Ü–∞ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∑–∞–Ω–æ–≤–æ")
                    bot.register_next_step_handler(call.message,
                                                   lambda mess: purpose_fill_1step(mess.text, chat_id, subgoal_num))
                elif day == 0 or day > get_days_in_month(month, year):
                    bot.send_message(chat_id,
                                     "–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –º–µ—Å—è—Ü–µ –Ω–µ—Ç –¥–Ω—è —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∑–∞–Ω–æ–≤–æ")
                    bot.register_next_step_handler(call.message,
                                                   lambda mess: purpose_fill_1step(mess.text, chat_id, subgoal_num))
                else:
                    date_string = str(year) + "-" + str(month) + "-" + str(day)  # –§–æ—Ä–º–∞—Ç: –ì–ì–ì–ì-–ú–ú-–î–î
                    date = datetime.datetime.strptime(date_string, "%Y-%m-%d")
                    if date.date() <= today:
                        bot.send_message(chat_id,
                                         "–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤—ã –º–æ–∂–µ—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∞—Ç—É –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –±–æ–ª—å—à—É—é —á–µ–º —Å–µ–≥–æ–¥–Ω—è—à–Ω—è—è"
                                         " –¥–∞—Ç–∞. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∑–∞–Ω–æ–≤–æ")
                        bot.register_next_step_handler(call.message,
                                                       lambda mess: purpose_fill_1step(mess.text, chat_id,
                                                                                       subgoal_num))
                    else:
                        bot.send_message(chat_id,
                                         "–î–∞—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞‚ú®\n –•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–¥—Ü–µ–ª–∏(–¥–æ 10)? –¢–∞–∫ –≤—ã —Å"
                                         " –±–æ–ª—å—à–µ–π –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é –¥–æ—Å—Ç–∏–≥–Ω–µ—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞",
                                         reply_markup=subgoals_keyboard)
                        cur = conn.cursor()
                        cur.execute("UPDATE purposes SET day_finish=? WHERE id=? AND subgoal_number=?",
                                    (date.date(), chat_id, subgoal_num))
                        conn.commit()
                        cur.close()

        bot.edit_message_text("–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à—É —Ü–µ–ª—å(–Ω–∞–∑–≤–∞–Ω–∏–µ/–∑–∞–≥–æ–ª–æ–≤–æ–∫)", call.from_user.id,
                              call.message.message_id)
        cur.close()
        bot.register_next_step_handler(call.message,
                                       lambda message: purpose_fill_start(message.text, call.from_user.id))


@bot.callback_query_handler(func=lambda call: call.data.startswith('subgoal_add'))
def subpurpose_start(call):
    if call.data[11] != 'i':
        subgoal_number = int(call.data[11:])
    else:
        subgoal_number = int(call.data[12:])
    cur = conn.cursor()
    cur.execute("SELECT COUNT(*) FROM purposes WHERE id=? AND purpose_above=?", (call.from_user.id, subgoal_number))
    if cur.fetchone()[0] == 10:
        bot.edit_message_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤—ã —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥—Ü–µ–ª–µ–π", call.from_user.id,
                              call.message.message_id)
    else:
        def subpurpose_fill_start(message, user_id, subgoal_num):
            cur = conn.cursor()
            cur.execute("SELECT * FROM purposes WHERE id=? AND subgoal_number=?", (user_id, subgoal_num))
            if cur.fetchone() is None:
                if subgoal_num//10==0:
                    bot.send_message(user_id, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ü–µ–ª–∏, –∫ –∫–æ—Ç–æ—Ä–æ–π –≤—ã –ø—ã—Ç–∞–µ—Ç–µ—Å—å –¥–æ–±–∞–≤–∏—Ç—å"
                                          " –ø–æ–¥—Ü–µ–ª—å –±–æ–ª—å—à–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                else:
                    bot.send_message(user_id, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ–¥—Ü–µ–ª–∏, –∫ –∫–æ—Ç–æ—Ä–æ–π –≤—ã –ø—ã—Ç–∞–µ—Ç–µ—Å—å –¥–æ–±–∞–≤–∏—Ç—å"
                                              " –ø—É–Ω–∫—Ç –±–æ–ª—å—à–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            else:
                subgoal_num = subgoal_num * 10
                cur.execute("SELECT * FROM purposes WHERE id=? AND subgoal_number=?", (user_id, subgoal_num))
                row = cur.fetchone()
                while row is not None:
                    cur.execute("SELECT * FROM purposes WHERE id=? AND subgoal_number=?", (user_id, row[6] + 1))
                    subgoal_num = row[6] + 1
                    row = cur.fetchone()
                cur.execute("INSERT INTO purposes(id, purpose, done_percentage, purpose_above, part_of_purpose_above,"
                            " subgoal_number) VALUES(?, ?, ?, ?, ?, ?)",
                            (user_id, message, 0, subgoal_num // 10, 0, subgoal_num))
                conn.commit()
                if subgoal_num // 100==0:
                    bot.send_message(user_id,
                                 "–û—Ç–ª–∏—á–Ω–æ! –£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É, –¥–æ –∫–æ—Ç–æ—Ä–æ–π –Ω—É–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–¥—Ü–µ–ª—å, –≤ —Ñ–æ—Ä–º–∞—Ç–µ –≥–≥–≥–≥-–º–º-–¥–¥. "
                                 "–ï—Å–ª–∏ –¥–µ–¥–ª–∞–π–Ω –≤–∞—à–µ–π –ø–æ–¥—Ü–µ–ª–∏ —Ç–∞–∫–æ–π –∂–µ, –∫–∞–∫ —É —Ü–µ–ª–∏, –≤–≤–µ–¥–∏—Ç–µ \"-\"")
                else:
                    bot.send_message(user_id,
                                     "–û—Ç–ª–∏—á–Ω–æ! –£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É, –¥–æ –∫–æ—Ç–æ—Ä–æ–π –Ω—É–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø—É–Ω–∫—Ç, –≤ —Ñ–æ—Ä–º–∞—Ç–µ –≥–≥–≥–≥-–º–º-–¥–¥. "
                                     "–ï—Å–ª–∏ –¥–µ–¥–ª–∞–π–Ω –≤–∞—à–µ–≥–æ –ø—É–Ω–∫—Ç–∞ —Ç–∞–∫–æ–π –∂–µ, –∫–∞–∫ —É –ø–æ–¥—Ü–µ–ª–∏, –≤–≤–µ–¥–∏—Ç–µ \"-\"")
                bot.register_next_step_handler(call.message,
                                               lambda mess: subpurpose_fill_1step(mess.text, user_id, subgoal_num))

                # –Ω–∞—á–∞–ª–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ–≥–æ
                goal_above = subgoal_num // 10
                cur.execute("SELECT COUNT(*) FROM purposes WHERE id=? AND purpose_above=?", (user_id, goal_above))
                amount_subgoals = cur.fetchone()[0]
                cur.execute("UPDATE purposes SET part_of_purpose_above=? WHERE id=? AND purpose_above=?",
                            (100 // amount_subgoals, user_id, goal_above))
                conn.commit()
                cur.execute("SELECT * FROM purposes WHERE id=? AND purpose_above=?", (user_id, goal_above))
                rows = cur.fetchall()
                sum_done = 0
                for row in rows:
                    sum_done += row[5] * row[4] // 100
                cur.execute("SELECT * FROM purposes WHERE id=? AND subgoal_number=?", (user_id, goal_above))
                row = cur.fetchone()
                sum_before = row[5] * row[4] // 100
                cur.execute("UPDATE purposes SET done_percentage=? WHERE id=? AND subgoal_number=?",
                            (sum_done, user_id, goal_above))
                conn.commit()
                goal_above = goal_above // 10
                if goal_above != 0:
                    cur.execute("SELECT done_percentage FROM purposes WHERE id=? AND subgoal_number=?",
                                (user_id, goal_above))
                    done_persentage = cur.fetchone()[0]
                    if done_persentage - sum_before + sum_done < 0:
                        cur.execute("UPDATE purposes SET done_percentage=? WHERE id=? AND subgoal_number=?",
                                    (0, user_id, goal_above))
                        conn.commit()
                    if done_persentage - sum_before + sum_done >= 96:
                        cur.execute("UPDATE purposes SET done_percentage=? WHERE id=? AND subgoal_number=?",
                                    (100, user_id, goal_above))
                        conn.commit()
                    else:
                        cur.execute("UPDATE purposes SET done_percentage=? WHERE id=? AND subgoal_number=?",
                                    (done_persentage - sum_before + sum_done, user_id, goal_above))
                        conn.commit()
                cur.close()

        def subpurpose_fill_1step(mess_text, chat_id, subgoal_num):
            cur = conn.cursor()
            cur.execute("SELECT * FROM purposes WHERE id=? AND subgoal_number=?", (chat_id, subgoal_num))
            if cur.fetchone() is None:
                if subgoal_num//100==0:
                    bot.send_message(chat_id,
                                 "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ–¥—Ü–µ–ª–∏, –∫–æ—Ç–æ—Ä—É—é –≤—ã –ø—ã—Ç–∞–µ—Ç–µ—Å—å –¥–æ—Ä–∞–±–æ—Ç–∞—Ç—å, –±–æ–ª—å—à–µ –Ω–µ—Ç")
                else:
                    bot.send_message(chat_id,
                                     "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø—É–Ω–∫—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –≤—ã –ø—ã—Ç–∞–µ—Ç–µ—Å—å –¥–æ—Ä–∞–±–æ—Ç–∞—Ç—å, –±–æ–ª—å—à–µ –Ω–µ—Ç")
            else:
                cur.execute('SELECT COUNT(*) FROM purposes WHERE id=? AND purpose_above=?',
                            (call.from_user.id, subgoal_num // 10))
                count = cur.fetchone()[0]
                subgoals_keyboard = types.InlineKeyboardMarkup()
                buttons = []
                subgoals_button = types.InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –ø—É–Ω–∫—Ç—ã",
                                                             callback_data='subgoal_add' + str(subgoal_num))
                next_subgoals_button = types.InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å —Å–ª–µ–¥—É—é—â—É—é –ø–æ–¥—Ü–µ–ª—å",
                                                                  callback_data='subgoal_add' + str(subgoal_num // 10))
                s_n = subgoal_num
                if subgoal_num > 99:
                    s_n = subgoal_num // 10
                    subgoals_button = types.InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –ø—É–Ω–∫—Ç",
                                                                 callback_data='subgoal_add' + str(subgoal_num // 10))
                    next_subgoals_button = types.InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å —Å–ª–µ–¥—É—é—â—É—é –ø–æ–¥—Ü–µ–ª—å",
                                                                      callback_data='subgoal_add' + str(
                                                                          subgoal_num // 100))
                cur.execute('SELECT COUNT(*) FROM purposes WHERE id=? AND purpose_above=?',
                            (call.from_user.id, subgoal_num // 10))
                if s_n < 100:
                    buttons = [subgoals_button]
                if cur.fetchone()[0] < 10:
                    buttons.append(next_subgoals_button)
                subgoals_keyboard.add(*buttons)
                if mess_text != '-' and not re.match(r'^\d{4}-\d{2}-\d{2}$', mess_text):
                    bot.send_message(chat_id,
                                     "–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤—ã –≤–≤–æ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –≤ —Ç–æ–º —Ñ–æ—Ä–º–∞—Ç–µ. –ù—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ "
                                     "–≥–≥–≥–≥-–º–º-–¥–¥ –∏–ª–∏ –≤–≤–µ—Å—Ç–∏ \"-\"")
                    bot.register_next_step_handler(call.message,
                                                   lambda mess: subpurpose_fill_1step(mess.text, chat_id, subgoal_num))
                elif mess_text == '-':
                    if buttons == []:
                        bot.send_message(chat_id,
                                         "–í—Ä–µ–º—è –¥–ª—è –ø—É–Ω–∫—Ç–∞ —É—Å—Ç–æ–Ω–æ–≤–ª–µ–Ω–æ‚úä\n –ë–æ–ª—å—à–µ –≤ —Ü–µ–ª—å –Ω–µ–ª—å–∑—è –Ω–∏—á–µ–≥–æ –¥–æ–±–∞–≤–∏—Ç—å")
                    elif buttons == [subgoals_button]:
                        bot.send_message(chat_id,
                                         "–í—Ä–µ–º—è –ø–æ–¥—Ü–µ–ª–∏ —É—Å—Ç–æ–Ω–æ–≤–ª–µ–Ω–æüåü\n –•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –ø—É–Ω–∫—Ç—ã(–¥–æ 10)? –≠—Ç–æ –º–æ–∂–µ—Ç"
                                         " –≤–∞–º –ø–æ–º–æ—á—å –µ—â–µ –±–æ–ª—å—à–µ. –î—Ä—É–≥–∏–µ –ø–æ–¥—Ü–µ–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –Ω–µ–ª—å–∑—è)",
                                         reply_markup=subgoals_keyboard)
                    elif buttons == [next_subgoals_button]:
                        bot.send_message(chat_id,
                                         "–í—Ä–µ–º—è –ø–æ–¥—Ü–µ–ª–∏ —É—Å—Ç–æ–Ω–æ–≤–ª–µ–Ω–æüí´\n –•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∏–µ –ø–æ–¥—Ü–µ–ª–∏(–¥–æ 10)? "
                                         "–ü—É–Ω–∫—Ç—ã –∫ —ç—Ç–æ–π –ø–æ–¥—Ü–µ–ª–∏ –±–æ–ª—å—à–µ –¥–æ–±–∞–≤–ª—è—Ç—å –Ω–µ–ª—å–∑—è)",
                                         reply_markup=subgoals_keyboard)
                    else:
                        bot.send_message(chat_id,
                                         "–í—Ä–µ–º—è –ø–æ–¥—Ü–µ–ª–∏ —É—Å—Ç–æ–Ω–æ–≤–ª–µ–Ω–æüê¨\n –•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∏–µ –ø–æ–¥—Ü–µ–ª–∏(–¥–æ 10) –∏–ª–∏"
                                         " –ø—É–Ω–∫—Ç—ã(–¥–æ 10)?",
                                         reply_markup=subgoals_keyboard)
                    cur.execute("SELECT * FROM purposes WHERE id=? AND subgoal_number=?", (chat_id, subgoal_num // 10))
                    date = cur.fetchone()[3]
                    if date is not None:
                        cur.execute("UPDATE purposes SET day_finish=? WHERE id=? AND subgoal_number=?",
                                    (date, chat_id, subgoal_num))
                        conn.commit()
                elif re.match(r'^\d{4}-\d{2}-\d{2}$', mess_text):
                    year = int(mess_text[:4])
                    month = int(mess_text[5:7])
                    day = int(mess_text[8:])
                    today = datetime.date.today()
                    if year < today.year or year > 2100:
                        bot.send_message(chat_id,
                                         "–ò–∑–≤–∏–Ω–∏—Ç–µ, –≥–æ–¥ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ –Ω–∞—Å—Ç–æ—è—â–µ–≥–æ –∏–ª–∏ –±–æ–ª—å—à–µ 2100."
                                         " –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∑–∞–Ω–æ–≤–æ")
                        bot.register_next_step_handler(call.message,
                                                       lambda mess: subpurpose_fill_1step(mess.text, chat_id,
                                                                                          subgoal_num))
                    elif month > 12 or month == 0:
                        bot.send_message(chat_id,
                                         "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ—Ç –º–µ—Å—è—Ü–∞ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∑–∞–Ω–æ–≤–æ")
                        bot.register_next_step_handler(call.message,
                                                       lambda mess: subpurpose_fill_1step(mess.text, chat_id,
                                                                                          subgoal_num))
                    elif day == 0 or day > get_days_in_month(month, year):
                        bot.send_message(chat_id,
                                         "–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –º–µ—Å—è—Ü–µ –Ω–µ—Ç –¥–Ω—è —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∑–∞–Ω–æ–≤–æ")
                        bot.register_next_step_handler(call.message,
                                                       lambda mess: subpurpose_fill_1step(mess.text, chat_id,
                                                                                          subgoal_num))
                    else:
                        date_string = str(year) + "-" + str(month) + "-" + str(day)  # –§–æ—Ä–º–∞—Ç: –ì–ì–ì–ì-–ú–ú-–î–î
                        date = datetime.datetime.strptime(date_string, "%Y-%m-%d")
                        if date.date() <= today:
                            bot.send_message(chat_id,
                                             "–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤—ã –º–æ–∂–µ—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∞—Ç—É –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –±–æ–ª—å—à—É—é —á–µ–º "
                                             "—Å–µ–≥–æ–¥–Ω—è—à–Ω—è—è –¥–∞—Ç–∞. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∑–∞–Ω–æ–≤–æ")
                            bot.register_next_step_handler(call.message,
                                                           lambda mess: subpurpose_fill_1step(mess.text, chat_id,
                                                                                              subgoal_num))
                        else:
                            cur.execute("SELECT * FROM purposes WHERE id=? AND subgoal_number=?",
                                        (chat_id, subgoal_num // 10))
                            purpose_date = cur.fetchone()[3]
                            if purpose_date is not None and datetime.datetime.strptime(purpose_date, "%Y-%m-%d").date() < date.date():
                                bot.send_message(chat_id, "–ù–µ–ª—å–∑—è –ø–æ—Å—Ç–∞–≤–∏—Ç—å –¥–∞—Ç—É, –ø—Ä–µ–≤—ã—à–∞—é—â—É—é –¥–∞—Ç—É (–ø–æ–¥)—Ü–µ–ª–∏")
                                bot.register_next_step_handler(call.message,
                                                               lambda mess: subpurpose_fill_1step(mess.text, chat_id,
                                                                                                  subgoal_num))
                            else:
                                if buttons == []:
                                    bot.send_message(chat_id,
                                                     "–í—Ä–µ–º—è –¥–ª—è –ø—É–Ω–∫—Ç–∞ —É—Å—Ç–æ–Ω–æ–≤–ª–µ–Ω–æ‚úä\n –ë–æ–ª—å—à–µ –≤ —Ü–µ–ª—å –Ω–µ–ª—å–∑—è –Ω–∏—á–µ–≥–æ"
                                                     " –¥–æ–±–∞–≤–∏—Ç—å")
                                elif buttons == [subgoals_button]:
                                    bot.send_message(chat_id,
                                                     "–í—Ä–µ–º—è –ø–æ–¥—Ü–µ–ª–∏ —É—Å—Ç–æ–Ω–æ–≤–ª–µ–Ω–æüåü\n –•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –ø—É–Ω–∫—Ç—ã(–¥–æ 10)? "
                                                     "–≠—Ç–æ –º–æ–∂–µ—Ç –≤–∞–º –ø–æ–º–æ—á—å –µ—â–µ –±–æ–ª—å—à–µ. –î—Ä—É–≥–∏–µ –ø–æ–¥—Ü–µ–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –Ω–µ–ª—å–∑—è)",
                                                     reply_markup=subgoals_keyboard)
                                elif buttons == [next_subgoals_button]:
                                    bot.send_message(chat_id,
                                                     "–í—Ä–µ–º—è –ø–æ–¥—Ü–µ–ª–∏ —É—Å—Ç–æ–Ω–æ–≤–ª–µ–Ω–æüí´\n –•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∏–µ –ø–æ–¥—Ü–µ–ª–∏"
                                                     "(–¥–æ 10)? –ü—É–Ω–∫—Ç—ã –∫ —ç—Ç–æ–π –ø–æ–¥—Ü–µ–ª–∏ –±–æ–ª—å—à–µ –¥–æ–±–∞–≤–ª—è—Ç—å –Ω–µ–ª—å–∑—è)",
                                                     reply_markup=subgoals_keyboard)
                                else:
                                    bot.send_message(chat_id,
                                                     "–í—Ä–µ–º—è –ø–æ–¥—Ü–µ–ª–∏ —É—Å—Ç–æ–Ω–æ–≤–ª–µ–Ω–æüåà\n"
                                                     "–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∏–µ –ø–æ–¥—Ü–µ–ª–∏(–¥–æ 10) –∏–ª–∏ –ø—É–Ω–∫—Ç—ã(–¥–æ 10)?",
                                                     reply_markup=subgoals_keyboard)

                                cur.execute("UPDATE purposes SET day_finish=? WHERE id=? AND subgoal_number=?",
                                            (date.date(), chat_id, subgoal_num))
                                conn.commit()
                                cur.close()
        if call.data[11] != 'i':
            bot.edit_message_text("–ù–∞–ø–∏—à–∏—Ç–µ –ø–æ–¥—Ü–µ–ª—å(–Ω–∞–∑–≤–∞–Ω–∏–µ/–∑–∞–≥–æ–ª–æ–≤–æ–∫)", call.from_user.id,
                                  call.message.message_id)
        else:
            bot.delete_message(call.from_user.id, call.message.message_id)
            bot.send_message(call.from_user.id, "–ù–∞–ø–∏—à–∏—Ç–µ –ø–æ–¥—Ü–µ–ª—å(–Ω–∞–∑–≤–∞–Ω–∏–µ/–∑–∞–≥–æ–ª–æ–≤–æ–∫)")
        cur.close()
        bot.register_next_step_handler(call.message,
                                       lambda message: subpurpose_fill_start(message.text, call.from_user.id,
                                                                             subgoal_number))
